import java.util.Comparator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class TestFP {

	public static void main(String[] args) {
		BiFunction<Integer, Integer, Integer> sum = (a,b)->a+b;
		MyInterFace sum1 = (a,b)->a+b+"";// ne na oborot, togda on tolko konkomtiniruet (a,b)-> "" + a + b;
		Comparator<Integer> sum2 = (a,b)->a+b;
		
		
		System.out.println(sum1.run(10, 15));
		
		System.out.println(isAlex().test("Vova"));
		
		Predicate<String> test = new Predicate<String>(){ //eto perviy variant//anonym interface 

			@Override
			public boolean test(String t) {
				
				return "Alex".equals(t);
			}
		};
		
		//===============================================================
		
		Supplier<Predicate<String>> test1 = TestFP::isAlex;
		System.out.println(test1.get().test("Vasya"));
		
		BiFunction<Integer,Integer,Integer> sum3 = TestFP::mySum;
		System.out.println(sum.apply(20, 12));
		
		Function<String,String> trimer = String::trim;
		String str = trimer.apply("     Vasya        ");
		System.out.println(str);
		
		
		
	}
	
	public static int mySum(int a,int b) {
		return a+b;
	}
	
	public static Predicate<String> isAlex(){//vtoroy variant
		return (v)->"Alex".equals(v);
	}
	
	interface MyInterFace{ //anonym interface
		String run(int a,int b);
	}

}
