package item;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.MonthDay;
import java.time.YearMonth;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.function.IntFunction;
import java.util.stream.BaseStream;
import java.util.stream.IntStream;

public class MyCalendar {
	
	static DateTimeFormatter monthsFormatter = DateTimeFormatter.ofPattern("MMMM",new Locale("he"));
	static DateTimeFormatter weekDayFormatter = DateTimeFormatter.ofPattern("EEE",new Locale("he"));
	static LocalDate stub = LocalDate.of(0,1,1);
	static LocalDate sunday = LocalDate.of(2019,1,13);
	
	public static void toConsole(int year) {
		printHeader();
		for(int i=1;i<13;i++) {
			printMonths(year,i);
		}
	}

	private static void printMonths(int year, int months) {
		printMonthsName(months);
		printWeekDaysString();
		printMonthsBody(year,months);
		
	}

	private static void printMonthsBody(int year, int months) {
	
		/*
		Calendar cal = new GregorianCalendar(year, months, 1);
		do {
		    // get the day of the week for the current day
		    int day = cal.get(Calendar.DAY_OF_WEEK);
		    // check if it is a Saturday or Sunday
		    if (day == Calendar.SUNDAY) {
		        // print the day - but you could add them to a list or whatever
		        System.out.println("\t\t\t\t\t\t" + cal.get(Calendar.DAY_OF_MONTH) + "\n");
		    }
		    // advance to the next day
		    cal.add(Calendar.DAY_OF_YEAR, 1);
		}  while (cal.get(Calendar.MONTH) == months);*/
		  Calendar cal = new GregorianCalendar();
	        cal.clear();
	        cal.set(year, months - 1, 1); // setting the calendar to the month and year provided as parameters 
	        System.out.println("Calendar for "+ cal.getDisplayName(Calendar.MONTH, Calendar.LONG,
	                        Locale.US) + " " + cal.get(Calendar.YEAR));//to print Calendar for month and year 
	        int firstWeekdayOfMonth = cal.get(Calendar.DAY_OF_WEEK);//which weekday was the first in month
	        int numberOfMonthDays = cal.getActualMaximum(Calendar.DAY_OF_MONTH); //lengh of days in a month 
	        printCalendar(firstWeekdayOfMonth, numberOfMonthDays);
	    }
	private static void printCalendar(int firstWeekdayOfMonth,int numberOfMonthDays) {
		int weekdayIndex = 0; 
        System.out.println("Su  MO  Tu  We  Th  Fr  Sa"); // The order of days depends on your calendar

        for (int day = 1; day < firstWeekdayOfMonth; day++) {
            System.out.print("    "); //this loop to print the first day in his correct place
            weekdayIndex++;
        }
        for (int day = 1; day <= numberOfMonthDays; day++) {

            if (day<10) // this is just for better visialising because unit number take less space of course than 2
            System.out.print(day+" ");
            else System.out.print(day); 
            weekdayIndex++;
            if (weekdayIndex == 7) {
                weekdayIndex = 0;
                System.out.println();
            } else { 
                System.out.print("  ");
            }}}
	
	

	private static void printWeekDaysString() {
		LocalDate current = sunday;
		String res = "";
		for(int i=7;i>0;i--) {
			res =current.format(weekDayFormatter)+res;
			if(i!=1) res = "\t" + res;
			current = current.plusDays(1);
		}
		System.out.println();
		System.out.println(res);
		System.out.println();
		
	}

	private static void printMonthsName(int months) {
		System.out.println("\t\t\t\t\t\t"+stub.withMonth(months).format(monthsFormatter));		
	}

	private static void printHeader() {
		// TODO Auto-generated method stub
		
	}
	/*
	 IntStream.rangeClosed(1,YearMonth.of(year, months).lengthOfMonth())
     .mapToObj(day -> LocalDate.of(year, months, day))
     .filter(date -> date.getDayOfWeek() == DayOfWeek.SATURDAY ||
                     date.getDayOfWeek() == DayOfWeek.SUNDAY)
     .forEach(date -> System.out.print("\t" + date.getDayOfMonth() + " "));
     
     
     ============================
     IntStream.rangeClosed(1,YearMonth.of(year, months).lengthOfMonth())
          .mapToObj(day -> LocalDate.of(year, months, day))
          .filter(date ->date.getDayOfWeek() == DayOfWeek.SUNDAY)
          .forEach(date -> System.out.print("\t\t\t\t\t\t" + date.getDayOfMonth() + "\n\n"));
     */
	
      private static void printMonthsBody2(int year, int months) {
		
    	  Month[] m = Month.values();
    	  for(int i = 1;i<13;i++) {
    		  System.out.println(m[i]);
    	  }
		
	}
}

